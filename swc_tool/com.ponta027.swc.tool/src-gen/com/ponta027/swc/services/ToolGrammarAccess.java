/*
 * generated by Xtext
 */
package com.ponta027.swc.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ToolGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSwcParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Swc | Interface;
		@Override public ParserRule getRule() { return rule; }

		//Swc | Interface
		public Alternatives getAlternatives() { return cAlternatives; }

		//Swc
		public RuleCall getSwcParserRuleCall_0() { return cSwcParserRuleCall_0; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_1() { return cInterfaceParserRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class SwcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Swc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortsPortParserRuleCall_3_0 = (RuleCall)cPortsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Swc:
		//	"swc" name=ID "{" ports+=Port+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"swc" name=ID "{" ports+=Port+ "}"
		public Group getGroup() { return cGroup; }

		//"swc"
		public Keyword getSwcKeyword_0() { return cSwcKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ports+=Port+
		public Assignment getPortsAssignment_3() { return cPortsAssignment_3; }

		//Port
		public RuleCall getPortsPortParserRuleCall_3_0() { return cPortsPortParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Port:
		//	PPort | RPort;
		@Override public ParserRule getRule() { return rule; }

		//PPort | RPort
		public Alternatives getAlternatives() { return cAlternatives; }

		//PPort
		public RuleCall getPPortParserRuleCall_0() { return cPPortParserRuleCall_0; }

		//RPort
		public RuleCall getRPortParserRuleCall_1() { return cRPortParserRuleCall_1; }
	}

	public class RPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInterfaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInterfaceInterfaceCrossReference_3_1_0 = (CrossReference)cInterfaceAssignment_3_1.eContents().get(0);
		private final RuleCall cInterfaceInterfaceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFromKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFromPortAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cFromPortPPortCrossReference_4_1_0 = (CrossReference)cFromPortAssignment_4_1.eContents().get(0);
		private final RuleCall cFromPortPPortQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cFromPortPPortCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RPort:
		//	"rport" name=ID "{" ("interface" interface=[Interface|QualifiedName])? ("from" fromPort=[PPort|QualifiedName])? "}";
		@Override public ParserRule getRule() { return rule; }

		//"rport" name=ID "{" ("interface" interface=[Interface|QualifiedName])? ("from" fromPort=[PPort|QualifiedName])? "}"
		public Group getGroup() { return cGroup; }

		//"rport"
		public Keyword getRportKeyword_0() { return cRportKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("interface" interface=[Interface|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"interface"
		public Keyword getInterfaceKeyword_3_0() { return cInterfaceKeyword_3_0; }

		//interface=[Interface|QualifiedName]
		public Assignment getInterfaceAssignment_3_1() { return cInterfaceAssignment_3_1; }

		//[Interface|QualifiedName]
		public CrossReference getInterfaceInterfaceCrossReference_3_1_0() { return cInterfaceInterfaceCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getInterfaceInterfaceQualifiedNameParserRuleCall_3_1_0_1() { return cInterfaceInterfaceQualifiedNameParserRuleCall_3_1_0_1; }

		//("from" fromPort=[PPort|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"from"
		public Keyword getFromKeyword_4_0() { return cFromKeyword_4_0; }

		//fromPort=[PPort|QualifiedName]
		public Assignment getFromPortAssignment_4_1() { return cFromPortAssignment_4_1; }

		//[PPort|QualifiedName]
		public CrossReference getFromPortPPortCrossReference_4_1_0() { return cFromPortPPortCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getFromPortPPortQualifiedNameParserRuleCall_4_1_0_1() { return cFromPortPPortQualifiedNameParserRuleCall_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInterfaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInterfaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInterfaceInterfaceCrossReference_3_1_0 = (CrossReference)cInterfaceAssignment_3_1.eContents().get(0);
		private final RuleCall cInterfaceInterfaceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cToPortAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cToPortRPortCrossReference_4_1_0 = (CrossReference)cToPortAssignment_4_1.eContents().get(0);
		private final RuleCall cToPortRPortQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cToPortRPortCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PPort:
		//	"pport" name=ID "{" ("interface" interface=[Interface|QualifiedName])? ("to" toPort=[RPort|QualifiedName])? "}";
		@Override public ParserRule getRule() { return rule; }

		//"pport" name=ID "{" ("interface" interface=[Interface|QualifiedName])? ("to" toPort=[RPort|QualifiedName])? "}"
		public Group getGroup() { return cGroup; }

		//"pport"
		public Keyword getPportKeyword_0() { return cPportKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("interface" interface=[Interface|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"interface"
		public Keyword getInterfaceKeyword_3_0() { return cInterfaceKeyword_3_0; }

		//interface=[Interface|QualifiedName]
		public Assignment getInterfaceAssignment_3_1() { return cInterfaceAssignment_3_1; }

		//[Interface|QualifiedName]
		public CrossReference getInterfaceInterfaceCrossReference_3_1_0() { return cInterfaceInterfaceCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getInterfaceInterfaceQualifiedNameParserRuleCall_3_1_0_1() { return cInterfaceInterfaceQualifiedNameParserRuleCall_3_1_0_1; }

		//("to" toPort=[RPort|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"to"
		public Keyword getToKeyword_4_0() { return cToKeyword_4_0; }

		//toPort=[RPort|QualifiedName]
		public Assignment getToPortAssignment_4_1() { return cToPortAssignment_4_1; }

		//[RPort|QualifiedName]
		public CrossReference getToPortRPortCrossReference_4_1_0() { return cToPortRPortCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getToPortRPortQualifiedNameParserRuleCall_4_1_0_1() { return cToPortRPortQualifiedNameParserRuleCall_4_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSenderReceiverInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClientServerInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Interface:
		//	SenderReceiverInterface | ClientServerInterface;
		@Override public ParserRule getRule() { return rule; }

		//SenderReceiverInterface | ClientServerInterface
		public Alternatives getAlternatives() { return cAlternatives; }

		//SenderReceiverInterface
		public RuleCall getSenderReceiverInterfaceParserRuleCall_0() { return cSenderReceiverInterfaceParserRuleCall_0; }

		//ClientServerInterface
		public RuleCall getClientServerInterfaceParserRuleCall_1() { return cClientServerInterfaceParserRuleCall_1; }
	}

	public class SenderReceiverInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SenderReceiverInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSRInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataElementDataElementParserRuleCall_3_0 = (RuleCall)cDataElementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SenderReceiverInterface:
		//	"SRInterface" name=ID "{" dataElement+=DataElement "}";
		@Override public ParserRule getRule() { return rule; }

		//"SRInterface" name=ID "{" dataElement+=DataElement "}"
		public Group getGroup() { return cGroup; }

		//"SRInterface"
		public Keyword getSRInterfaceKeyword_0() { return cSRInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//dataElement+=DataElement
		public Assignment getDataElementAssignment_3() { return cDataElementAssignment_3; }

		//DataElement
		public RuleCall getDataElementDataElementParserRuleCall_3_0() { return cDataElementDataElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DataElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDataTypeDataTypeCrossReference_2_0 = (CrossReference)cDataTypeAssignment_2.eContents().get(0);
		private final RuleCall cDataTypeDataTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cDataTypeDataTypeCrossReference_2_0.eContents().get(1);
		
		//DataElement:
		//	"dataType" name=ID dataType=[DataType];
		@Override public ParserRule getRule() { return rule; }

		//"dataType" name=ID dataType=[DataType]
		public Group getGroup() { return cGroup; }

		//"dataType"
		public Keyword getDataTypeKeyword_0() { return cDataTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//dataType=[DataType]
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }

		//[DataType]
		public CrossReference getDataTypeDataTypeCrossReference_2_0() { return cDataTypeDataTypeCrossReference_2_0; }

		//ID
		public RuleCall getDataTypeDataTypeIDTerminalRuleCall_2_0_1() { return cDataTypeDataTypeIDTerminalRuleCall_2_0_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataType:
		//	"Type" name=ID "{" "}";
		@Override public ParserRule getRule() { return rule; }

		//"Type" name=ID "{" "}"
		public Group getGroup() { return cGroup; }

		//"Type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClientServerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClientServerInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCSInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ClientServerInterface:
		//	"CSInterface" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"CSInterface" name=ID
		public Group getGroup() { return cGroup; }

		//"CSInterface"
		public Keyword getCSInterfaceKeyword_0() { return cCSInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final QualifiedNameElements pQualifiedName;
	private final SwcElements pSwc;
	private final PortElements pPort;
	private final RPortElements pRPort;
	private final PPortElements pPPort;
	private final InterfaceElements pInterface;
	private final SenderReceiverInterfaceElements pSenderReceiverInterface;
	private final DataElementElements pDataElement;
	private final DataTypeElements pDataType;
	private final ClientServerInterfaceElements pClientServerInterface;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ToolGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pSwc = new SwcElements();
		this.pPort = new PortElements();
		this.pRPort = new RPortElements();
		this.pPPort = new PPortElements();
		this.pInterface = new InterfaceElements();
		this.pSenderReceiverInterface = new SenderReceiverInterfaceElements();
		this.pDataElement = new DataElementElements();
		this.pDataType = new DataTypeElements();
		this.pClientServerInterface = new ClientServerInterfaceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ponta027.swc.Tool".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Element:
	//	Swc | Interface;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Swc:
	//	"swc" name=ID "{" ports+=Port+ "}";
	public SwcElements getSwcAccess() {
		return pSwc;
	}
	
	public ParserRule getSwcRule() {
		return getSwcAccess().getRule();
	}

	//Port:
	//	PPort | RPort;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//RPort:
	//	"rport" name=ID "{" ("interface" interface=[Interface|QualifiedName])? ("from" fromPort=[PPort|QualifiedName])? "}";
	public RPortElements getRPortAccess() {
		return pRPort;
	}
	
	public ParserRule getRPortRule() {
		return getRPortAccess().getRule();
	}

	//PPort:
	//	"pport" name=ID "{" ("interface" interface=[Interface|QualifiedName])? ("to" toPort=[RPort|QualifiedName])? "}";
	public PPortElements getPPortAccess() {
		return pPPort;
	}
	
	public ParserRule getPPortRule() {
		return getPPortAccess().getRule();
	}

	//Interface:
	//	SenderReceiverInterface | ClientServerInterface;
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//SenderReceiverInterface:
	//	"SRInterface" name=ID "{" dataElement+=DataElement "}";
	public SenderReceiverInterfaceElements getSenderReceiverInterfaceAccess() {
		return pSenderReceiverInterface;
	}
	
	public ParserRule getSenderReceiverInterfaceRule() {
		return getSenderReceiverInterfaceAccess().getRule();
	}

	//DataElement:
	//	"dataType" name=ID dataType=[DataType];
	public DataElementElements getDataElementAccess() {
		return pDataElement;
	}
	
	public ParserRule getDataElementRule() {
		return getDataElementAccess().getRule();
	}

	//DataType:
	//	"Type" name=ID "{" "}";
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//ClientServerInterface:
	//	"CSInterface" name=ID;
	public ClientServerInterfaceElements getClientServerInterfaceAccess() {
		return pClientServerInterface;
	}
	
	public ParserRule getClientServerInterfaceRule() {
		return getClientServerInterfaceAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
