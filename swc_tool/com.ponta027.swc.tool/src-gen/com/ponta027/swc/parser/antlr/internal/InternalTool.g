/*
 * generated by Xtext
 */
grammar InternalTool;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.ponta027.swc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ponta027.swc.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ponta027.swc.services.ToolGrammarAccess;

}

@parser::members {

 	private ToolGrammarAccess grammarAccess;
 	
    public InternalToolParser(TokenStream input, ToolGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ToolGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getSwcParserRuleCall_0()); 
    }
    this_Swc_0=ruleSwc
    { 
        $current = $this_Swc_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getInterfaceParserRuleCall_1()); 
    }
    this_Interface_1=ruleInterface
    { 
        $current = $this_Interface_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleSwc
entryRuleSwc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwcRule()); }
	 iv_ruleSwc=ruleSwc 
	 { $current=$iv_ruleSwc.current; } 
	 EOF 
;

// Rule Swc
ruleSwc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='swc' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwcAccess().getSwcKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSwcAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSwcRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwcAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwcAccess().getPortsPortParserRuleCall_3_0()); 
	    }
		lv_ports_3_0=rulePort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwcRule());
	        }
       		add(
       			$current, 
       			"ports",
        		lv_ports_3_0, 
        		"Port");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwcAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulePort
entryRulePort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	 iv_rulePort=rulePort 
	 { $current=$iv_rulePort.current; } 
	 EOF 
;

// Rule Port
rulePort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPortAccess().getPPortParserRuleCall_0()); 
    }
    this_PPort_0=rulePPort
    { 
        $current = $this_PPort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPortAccess().getRPortParserRuleCall_1()); 
    }
    this_RPort_1=ruleRPort
    { 
        $current = $this_RPort_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRPort
entryRuleRPort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRPortRule()); }
	 iv_ruleRPort=ruleRPort 
	 { $current=$iv_ruleRPort.current; } 
	 EOF 
;

// Rule RPort
ruleRPort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rport' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRPortAccess().getRportKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRPortAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRPortAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='interface' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRPortAccess().getInterfaceKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRPortRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRPortAccess().getInterfaceInterfaceCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='from' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRPortAccess().getFromKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRPortRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRPortAccess().getFromPortPPortCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRPortAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulePPort
entryRulePPort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPortRule()); }
	 iv_rulePPort=rulePPort 
	 { $current=$iv_rulePPort.current; } 
	 EOF 
;

// Rule PPort
rulePPort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pport' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPPortAccess().getPportKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPPortAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPPortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPPortAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='interface' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPPortAccess().getInterfaceKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPPortRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPPortAccess().getInterfaceInterfaceCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPPortAccess().getToKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPPortRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPPortAccess().getToPortRPortCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPPortAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInterfaceAccess().getSenderReceiverInterfaceParserRuleCall_0()); 
    }
    this_SenderReceiverInterface_0=ruleSenderReceiverInterface
    { 
        $current = $this_SenderReceiverInterface_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterfaceAccess().getClientServerInterfaceParserRuleCall_1()); 
    }
    this_ClientServerInterface_1=ruleClientServerInterface
    { 
        $current = $this_ClientServerInterface_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSenderReceiverInterface
entryRuleSenderReceiverInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSenderReceiverInterfaceRule()); }
	 iv_ruleSenderReceiverInterface=ruleSenderReceiverInterface 
	 { $current=$iv_ruleSenderReceiverInterface.current; } 
	 EOF 
;

// Rule SenderReceiverInterface
ruleSenderReceiverInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SRInterface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSenderReceiverInterfaceAccess().getSRInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSenderReceiverInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSenderReceiverInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSenderReceiverInterfaceAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSenderReceiverInterfaceAccess().getDataElementDataElementParserRuleCall_3_0()); 
	    }
		lv_dataElement_3_0=ruleDataElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSenderReceiverInterfaceRule());
	        }
       		add(
       			$current, 
       			"dataElement",
        		lv_dataElement_3_0, 
        		"DataElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSenderReceiverInterfaceAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDataElement
entryRuleDataElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataElementRule()); }
	 iv_ruleDataElement=ruleDataElement 
	 { $current=$iv_ruleDataElement.current; } 
	 EOF 
;

// Rule DataElement
ruleDataElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dataType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataElementAccess().getDataTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDataElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataElementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDataElementAccess().getDataTypeDataTypeCrossReference_2_0()); 
	}

)
))
;







// Entry rule entryRuleClientServerInterface
entryRuleClientServerInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClientServerInterfaceRule()); }
	 iv_ruleClientServerInterface=ruleClientServerInterface 
	 { $current=$iv_ruleClientServerInterface.current; } 
	 EOF 
;

// Rule ClientServerInterface
ruleClientServerInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CSInterface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClientServerInterfaceAccess().getCSInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClientServerInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClientServerInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


